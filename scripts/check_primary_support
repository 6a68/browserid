#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

const
https = require('https'),
und = require('underscore'),

primary = require('../lib/primary'),
logging = require('../lib/logging.js');

logging.enableConsoleLogging();

if (process.argv.length !== 3) {
  console.log('Checks to see if a domain has a proper declaration of support as a browserid primary');
  console.log('Usage:', process.argv[1], '<domain>');
  process.exit(1);
}
var domain = process.argv[2];

primary.checkSupport(domain, function(err, urls, publicKey) {
  if (err) {
    process.stderr.write("error: " + err + "\n");
    process.exit(1);
  }
  console.log('Priary domain: ', domain);
  console.log('Public Key: ', publicKey);
  getResource(urls.auth, urls);
  getResource(urls.prov, urls);
});

/**
 * Retrieve one of their urls and examine aspects of it for issues
 */
function getResource(url, urls) {
    console.log('Checking ', urls.auth);
  var r = https.request({
    host: domain,
    path: url,
    method: 'GET'
  }, checkResource(urls));
  r.on('error', function (e) {
    console.log("ERROR: ", e.message);
  });
  r.end();
};

/**
 * Called once we have a response.
 *
 * Do the provisioning and signin resources look kosher?
 */
function checkResource (urls) {
  return function (resp) {
    // Their are no X-Frame options
    if (resp.statusCode != 200) {
      console.log("ERROR: HTTP status code=", resp.statusCode);
    } else {
      var xframe = und.filter(Object.keys(resp.headers), function (header) {
        return header.toLowerCase() == 'x-frame-options';
      });
      if (xframe.length == 1) {
        console.log("ERROR: X-Frame-Options=", resp.headers[xframe[0]], ", BrowserID will not be able to communicate with your site." +
            " Suppress X-Frame-Options for /.well-known/browserid, " + urls.auth + ' and ' + urls.prov);
      }
    }
  };
};